services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: accounting
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  superset:
    build:
      context: .
      dockerfile: superset.Dockerfile
    environment:
      SUPERSET_LOAD_EXAMPLES: "no"
      SUPERSET_SECRET_KEY: "secret_key"
      SUPERSET_CONFIG_PATH: "/app/superset_home/superset_config.py"
    volumes:
      - superset_home:/app/superset_home
      - ./backend/superset_config.py:/app/superset_home/superset_config.py
    ports:
      - "8088:8088"
    depends_on:
      - postgres

  redis:
    image: docker.io/redis:6
    expose:
      - 6379
    volumes:
      - redis_data:/data
    healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          interval: 5s
          timeout: 2s
          retries: 5

  backend:
    build:
      context: ./backend/api/
      dockerfile: ../Dockerfile
    env_file:
      - ./.env
    volumes:
      - ./backend/api/:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis

  celery_worker: # Celery worker service
      build:
        context: ./backend/api/
        dockerfile: ../Dockerfile # Use the same Dockerfile as backend
      command: celery -A api.celery worker -l info
      volumes:
        - ./backend/api/:/app # Mount code for worker to access tasks
      depends_on:
        - backend # Celery worker depends on backend and redis
        - redis
      env_file:
        - ./.env # Share environment variables with worker

  flower:
    build:
      context: ./backend/api/
      dockerfile: ../Dockerfile
    command: celery -A api.celery flower    
    ports:
      - "5555:5555"
    depends_on:
      - redis
    volumes:
      - ./backend/api/:/app
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm run dev
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"

volumes:
  postgres_data:
  superset_home:
  pgadmin_data:
  redis_data:

